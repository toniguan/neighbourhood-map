{"version":3,"sources":["Venue.js","VenueList.js","SideBar.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["Venue","_this","this","myVenue","props","react_default","a","createElement","tabIndex","role","className","onClick","listItemClicked","src","venue","categories","icon","prefix","suffix","alt","name","Component","VenueList","venues","map","idx","src_Venue","key","SideBar","state","query","filterVenues","filter","place","toLowerCase","includes","queryChange","e","setState","target","value","trim","markers","isMatched","marker","find","id","isVisible","updateSuperState","type","placeholder","onChange","src_VenueList","window","gm_authFailure","alert","MyMapComponent","withScriptjs","withGoogleMap","lib","defaultZoom","zoom","defaultCenter","lat","lng","center","parseFloat","mapClicked","arr","position","markerClicked","animation","isOpen","google","maps","Animation","BOUNCE","aplace","bestPhoto","onCloseClick","closeAllMarkers","concat","description","rating","Map","Object","assign","googleMapURL","loadingElement","style","height","containerElement","width","mapElement","screenWidth","innerWidth","document","documentElement","clientWidth","body","fq_id","fq_secret","App","obj","getVenueDetails","endPoint","parameters","client_id","client_secret","v","axios","get","URLSearchParams","then","response","data","catch","error","console","log","getVenues","near","limit","groups","items","geocode","location","myMarkers","myMarker","toggleListView","drawer","getElementsByTagName","aria-label","src_SideBar","src_Map","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33edfb19.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n//the venue item in ListView\nclass Venue extends Component {\n  render(){\n    const {myVenue} = this.props\n    return (\n      <li tabIndex=\"0\" role=\"button\" className=\"venueItem\"\n        onClick={()=>{this.props.listItemClicked(myVenue)}}>\n        <img src={myVenue.venue.categories[0].icon.prefix+\"30\"+myVenue.venue.categories[0].icon.suffix}  alt=\"icon\"/>\n        {myVenue.venue.name}\n      </li>\n    )\n  }\n}\n\nexport default Venue\n","import React, { Component } from 'react';\nimport Venue from './Venue.js'\n\nclass VenueList extends Component {\n  render(){\n    const {venues} = this.props\n    return (\n      <ol className=\"venueList\">\n        {venues && venues.map((myVenue, idx) =>(\n            <Venue key={idx}\n              myVenue={myVenue}\n              listItemClicked={this.props.listItemClicked}/>)\n\n        )}\n      </ol>\n    )\n  }\n}\n\nexport default  VenueList;\n","import React, { Component } from 'react';\nimport VenueList from './VenueList.js'\n\nclass SideBar extends Component {\n  state = {\n    query: \"\",\n  }\n\n  //got the filtered venues based on query\n  filterVenues = ()=>{\n    if(this.state.query){\n      const places = this.props.venues.filter(\n        place => place.venue.name.toLowerCase().includes(this.state.query)\n      )\n      return places;\n    }else{\n      return this.props.venues;\n    }\n  }\n\n  //if there is a query, set the matched markers to be visible and update the state of parent Component\n  queryChange = e=>{\n    this.setState({query : e.target.value.toLowerCase().trim()});\n    const markers = this.props.venues.map(place=>{\n      const isMatched = place.venue.name.toLowerCase().includes(e.target.value.toLowerCase().trim());\n      const marker = this.props.markers.find(marker => marker.id === place.venue.id);\n      if(isMatched){\n        marker.isVisible = true;\n      }else {\n        marker.isVisible = false;\n      }\n      return marker;\n    });\n    this.props.updateSuperState({markers});\n  }\n\n  render(){\n    return (\n      <div className=\"sideBar\">\n        <input id=\"search\" type=\"search\" placeholder=\"Filter by Museum Names\"\n          onChange={this.queryChange}/>\n        <VenueList\n          venues={this.filterVenues()}\n          listItemClicked={this.props.listItemClicked}/>\n      </div>\n    );\n  }\n}\n\nexport default SideBar;\n","/* global google*/\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow} from \"react-google-maps\"\nimport React, { Component } from 'react';\n\n//global function, automatically called when authentication failed\nwindow.gm_authFailure= ()=>{\n    window.alert(\"Google maps failed to load!\")\n}\n\nconst MyMapComponent = withScriptjs(withGoogleMap((props) =>\n  <GoogleMap\n    defaultZoom={8}\n    zoom={props.zoom}\n    defaultCenter={{ lat: 37.77493, lng: -122.41942 }}\n    center={{lat: parseFloat(props.center.lat), lng:parseFloat(props.center.lng)} }\n    onClick={e=>{props.mapClicked()}}\n  >\n\n    {props.markers &&\n      props.markers.filter(marker =>marker.isVisible)\n      .map((marker,idx, arr) =>(\n        <Marker\n          key={idx}\n          position={{ lat: marker.lat, lng: marker.lng }}\n          onClick={e=>{props.markerClicked(marker)}}\n          animation = {marker.isOpen ? google.maps.Animation.BOUNCE:\"\"}>\n          {marker.isOpen && props.aplace.bestPhoto &&(\n            <InfoWindow onCloseClick={props.closeAllMarkers}>\n              <div className=\"venue-details\">\n                <img src={`${props.aplace.bestPhoto.prefix}200x200${props.aplace.bestPhoto.suffix}`} alt={props.aplace.description}/>\n                <p className=\"venue-name\">{props.aplace.name}</p>\n                <p className=\"venue-rating\">rating : {props.aplace.rating}</p>\n              </div>\n            </InfoWindow>)}\n        </Marker>\n    ))}\n\n  </GoogleMap>\n))\n\nclass Map extends Component{\n  render(){\n    return(\n      <MyMapComponent\n        {...this.props}\n        googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyCzf_g_JlklabDU1So6i1tN0qR5DxcCdGc\"\n        loadingElement={<div style={{ height: `100%` }} />}\n        containerElement={<div style={{ height: `100%`, width: `100%` }} />}\n        mapElement={<div style={{ height: `100%` }} />}\n      />\n    )\n  }\n}\nexport default Map\n","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport SideBar from './SideBar.js'\nimport Map from './Map.js'\n\n\nconst screenWidth = window.innerWidth\n             || document.documentElement.clientWidth\n             || document.body.clientWidth;\n\nconst fq_id=\"RZANV552KJF0S0DUSR0TPJW0O2C5PCA2124JLGYYENM0GBSA\"\nconst fq_secret=\"LFF44ROWN3QJDNSBD3JV5ZDIKL5LS0OVHFPP5RLDMZLHCDG0\"\n\n/*\nconst fq_id=\"OBRGOOQFRBSSSK35KAXHZ3L0BP24QE5MYPNDLGY1DZXMT00U\";\nconst fq_secret=\"QRSRJ3JRCOSYGBWY1QYAUYP1GYGDJOSYJZGQHNLPPSR3U00K\";*/\n\n\nclass App extends Component {\n  state = {\n    venues : [],\n    center : [],\n    markers : [],\n    zoom : 13,\n    aplace : {}, //store the details for a selected place\n    updateSuperState: obj =>{\n      this.setState(obj);\n    }\n  }\n\n  componentDidMount() {\n    this.getVenues();\n  }\n\n  getVenueDetails = (id)=>{\n    const endPoint = `https://api.foursquare.com/v2/venues/${id}?`\n    const parameters = {\n      client_id: fq_id,\n      client_secret: fq_secret,\n      v: \"20180110\"\n    }\n    axios.get(endPoint + new URLSearchParams(parameters))\n      .then(response =>{\n        this.setState({aplace:response.data.response.venue})\n      })\n      .catch(error =>{\n        console.log(\"ERROR!!\"  + error)\n      })\n  }\n\n  //get 20 museums in San Francisco area\n  getVenues = ()=>{\n    const endPoint = \"https://api.foursquare.com/v2/venues/explore?\"\n    const parameters = {\n      client_id: fq_id,\n      client_secret: fq_secret,\n      query: \"museum\",\n      near: \"San Francisco\",\n      limit: 20,\n      v: \"20180110\"\n    }\n    axios.get(endPoint + new URLSearchParams(parameters))\n      .then(response =>{\n        //console.log(response.data.response.groups[0].items)\n        const venues = response.data.response.groups[0].items;\n        const center = response.data.response.geocode.center;\n        const markers = venues.map(place =>{\n          return {\n            lat : place.venue.location.lat,\n            lng : place.venue.location.lng,\n            isOpen : false,\n            isVisible : true,\n            id : place.venue.id,\n          }\n        });\n        this.setState({venues, center, markers});\n      })\n      .catch(error =>{\n        console.log(\"ERROR!!\"  + error)\n      })\n  }\n\n closeAllMarkers = ()=>{\n   var myMarkers = this.state.markers.map(marker =>{\n     marker.isOpen = false;\n     return marker;\n   });\n   this.setState({markers : myMarkers})\n }\n\n //marker click will open infowindow\n markerClicked = (marker)=>{\n   this.closeAllMarkers();\n   this.setState({aplace : {}})\n   marker.isOpen = true;\n   this.setState({markers : Object.assign(this.state.markers, marker)})\n   this.getVenueDetails(marker.id)\n }\n\n//select a listitem, same as click a marker\n listItemClicked = (venue)=>{\n   var myMarker = this.state.markers.find(marker => marker.id === venue.venue.id)\n   this.markerClicked(myMarker);\n }\n\n\n toggleListView = ()=>{\n   //console.log(\"menu clicked\")\n   if(screenWidth>=600) return;\n   var drawer = document.getElementsByTagName('nav')[0];\n   if(drawer.className===\"\"){\n     drawer.className=\"open\";\n   }else{\n     drawer.className=\"\";\n   }\n }\n\n //when screen width < 600, click map will close listView\n mapClicked = ()=>{\n   //console.log(\"map is clicked\")\n   if(screenWidth>=600) return;\n   var drawer = document.getElementsByTagName('nav')[0];\n   if(drawer.className===\"open\" ){\n     drawer.className = \"\";\n   }\n }\n  render() {\n    return (\n      <div className=\"App\">\n        <header id=\"header\">\n          <div tabIndex=\"0\" aria-label=\"menu\" className=\"header_menu\" onClick={this.toggleListView}>\n            <i className=\"fa fa-bars\"></i>\n          </div>\n          <h1 className=\"header_title\">San Francisco Museums</h1>\n        </header>\n\n        <main id=\"maincontent\">\n          <nav>\n            <SideBar {...this.state}\n              listItemClicked={this.listItemClicked}/>\n          </nav>\n          <div className=\"map\" role=\"application\" aria-label=\"map\">\n            <Map {...this.state}\n              markerClicked= {this.markerClicked}\n              mapClicked={this.mapClicked}\n              closeAllMarkers={this.closeAllMarkers}/>\n          </div>\n        </main>\n        <footer id=\"footer\">Using Google Maps and Foursqure API</footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}